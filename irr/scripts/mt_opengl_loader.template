// This code was generated by scripts/BindingGenerator.py
// Do not modify it, modify and run the generator instead.

#include "mt_opengl.h"
#include <string>
#include <sstream>

OpenGLProcedures GL;

#define COND_VER(major, minor) (majorVersion > (major) || (majorVersion == (major) && minorVersion >= (minor)))
#define CHECK_VER(gl_major, gl_minor, gles_major, gles_minor) COND_VER(load_gles?gles_major:gl_major, load_gles?gles_minor:gl_minor)
#define CHECK_VER_GL(gl_major, gl_minor) (!load_gles && COND_VER(gl_major, gl_minor))
#define CHECK_VER_GLES(gles_major, gles_minor) (load_gles && COND_VER(gles_major, gles_minor))
#define CHECK_EXT(ext) IsExtensionPresent(ext)
#define CHECK_EXT_GL(gl_ext) (!load_gles && IsExtensionPresent(gl_ext))
#define CHECK_EXT_GLES(gles_ext) (load_gles && IsExtensionPresent(gles_ext))

void OpenGLProcedures::LoadAllProcedures(irr::video::IContextManager *cmgr, bool load_gles)
{
	/* Load always avaliable functions */
${basic_pointers_load}

	/* Get GL/GL ES version */
	GLint majorVersion, minorVersion;
	GetIntegerv(MAJOR_VERSION, &majorVersion);
	GetIntegerv(MINOR_VERSION, &minorVersion);

	if (!GetStringi && (CHECK_VER(3,0,3,0))) GetStringi = (PFNGLGETSTRINGIPROC_MT)cmgr->getProcAddress("glGetStringi");

	if (majorVersion >= 3) {
		/* OpenGL 3 & ES 3 way to enumerate extensions */
		GLint ext_count = 0;
		GetIntegerv(NUM_EXTENSIONS, &ext_count);
		// clear error which is raised if unsupported
		while (GetError() != GL.NO_ERROR) {}
		extensions.reserve(ext_count);
		for (GLint k = 0; k < ext_count; k++) {
			auto tmp = GetStringi(EXTENSIONS, k);
			if (tmp)
				extensions.emplace((char*)tmp);
		}
	} else {
		/* OpenGL 2 / ES 2 way to enumerate extensions */
		auto ext_str = GetString(EXTENSIONS);
		if (!ext_str)
			return;
		// get the extension string, chop it up
		std::istringstream ext_ss((char*)ext_str);
		std::string tmp;
		while (std::getline(ext_ss, tmp, ' '))
			extensions.emplace(tmp);
	}

	/* Load conditionaly avaliable functions */
${cond_pointers_load}
}
